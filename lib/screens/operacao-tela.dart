import 'package:curved_navigation_bar/curved_navigation_bar.dart';
import 'package:flutter/material.dart';
import 'package:flutter_slidable/flutter_slidable.dart';
import 'package:http/http.dart' as http;
import 'package:lottie/lottie.dart';
import 'package:pos_app/controller/operacao-controller.dart';
import 'package:pos_app/dtos/operacao-dto-list.dart';
import 'package:pos_app/utilitarios/VariaveisGlobais.dart';
import '../controller/app_controller.dart';
import '../dtos/objetos/obj-venda-e-servico.dart';
import '../dtos/operacao-dto.dart';
import 'operacao-inserindo.dart';

class OperacaoTela extends StatefulWidget {
  const OperacaoTela({Key? key}) : super(key: key);

  @override
  State<OperacaoTela> createState() => _OperacaoTelaState();
}

class _OperacaoTelaState extends State<OperacaoTela> {
  bool existemOperacoes = false;
  bool isLoading = true;
  List<OperacaoDto> operacaoList = [];
  late OperacaoDtoList operacaoDtoList;
  double soma = 0.00;
  int qtOperacoes = 0;

  //conjunto da barra inferior
  int _page = 1;
  final GlobalKey _bottomNavigationKey = GlobalKey();


  String texto = '';

  @override
  void initState() {
    super.initState();
    getOperacaoList();
    _page = 2;
  }

  int _selectedIndex = 0;


  Future<void> _onItemTapped(int index) async {
    if(index == 1){
      // await Navigator.push(
      //   context,
      //   MaterialPageRoute(
      //     builder: (context) => ProdutoNovoEdicaoTela(
      //       idProduto: VariaveisGlobais.NOVO_PRODUTO,
      //     ),
      //   ),
      // );
      // getProdutoList();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        items: [
          BottomNavigationBarItem(
            icon: Icon(Icons.report),
            label: 'nada aqui',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.add,size: 30,),
            label: 'novo produto',
          ),
        ],
      ),
      // bottomNavigationBar: buildCurvedNavigationBar(),
      body: body(),
    );
  }

  Widget body() {
    return _page == 0
        ? pesquisa()
        : operacoes();
  }

  Widget operacoes() {
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        title: Center(child: Text('operacoes')),
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Container(
          alignment: Alignment.center,
          child: Column(
            children: [
              Card(
                elevation: 10,
                child: Container(
                  height: MediaQuery.of(context).size.height * 0.3,
                  width: MediaQuery.of(context).size.width * 0.9,
                  child: Column(
                    children: [
                      Text('quantidade de operacoes abertas:' +VariaveisGlobais.autogenerated.quantidadeDeOps.toString())
                    ],
                  ),
                ),
              )
            ],
          ),
        ),
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          FloatingActionButton(
            child: Icon(Icons.add),
            onPressed: () {
                Navigator.pushNamed(context, '/operacaoNova');
            },
          ),
          SizedBox(height: 60,),
        ],
      ),
    );
  }

  Widget pesquisa() {
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        title: Center(child: Text('pesquisa')),
      ),
      body: Container(),
    );
  }

  Widget buildCurvedNavigationBar() {
    return CurvedNavigationBar(
      index: 1,
      backgroundColor: AppController.instance.buildThemeData().scaffoldBackgroundColor,
      color: AppController.instance.buildThemeData().primaryColor,
      key: _bottomNavigationKey,
      items: <Widget>[
        SizedBox(
          height: 60,
          width: 60,
          child: Icon(Icons.search,size: 30,),
        ),
        SizedBox(
          height: 60,
          width: 60,
          child: Lottie.asset('assets/seller.json', fit: BoxFit.contain),
        ),
      ],
      onTap: (index) {
        setState(() {
          _page = index;
        });
      },
    );
  }

  Widget retornaALista(int index) {
    return ListTile(
      title: Text(
        operacaoList[index].tipoDeOperacaoEnum,
        style: TextStyle(fontSize: 18, color: Colors.white),
      ),
      subtitle: Row(
        children: [
          Text(
            VariaveisGlobais.moeda +
                operacaoList[index]
                    .objCalculosDeOperacaoDoBackEnd.vlTotal
                    .toString(),
            style: TextStyle(color: Colors.white),
          )
        ],
      ),
      shape: Border.all(color: Colors.white),
      onTap: () {},
    );
  }

  Widget widgetZeroOperacoes() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Container(
          color: Colors.blue,
          height: 200,
          width: MediaQuery.of(context).size.width * .95,
          child: Column(
            children: [
              Row(
                children: [
                  Text(
                    'não existem operações não finalizadas',
                    style: TextStyle(fontSize: 22, color: Colors.white),
                  )
                ],
              )
            ],
          ),
        ),
      ],
    );
  }

  Future<void> getOperacaoList() async {
    setState(() {
      isLoading = true;
    });
     await OperacaoController().atualizarListaDeProdutos();
    setState(() {
      isLoading = false;
    });
  }
}
